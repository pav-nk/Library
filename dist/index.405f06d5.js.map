{"mappings":"ACCA,MAAM,EAAO,SAAS,IAAI,CAAC,aAAa,CAAC,gBACnC,EAAiB,SAAS,IAAI,CAAC,aAAa,CAAC,mBAC7C,EAAsB,SAAS,IAAI,CAAC,aAAa,CAAC,mBAClD,EAAe,SAAS,IAAI,CAAC,aAAa,CAAC,kBAEjD,IAAI,EAAY,EAAE,CAElB,SAAS,EAAK,CAAE,CAAE,CAAI,CAAE,CAAM,CAAE,CAAM,EACpC,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,YAAY,CAAG,WAClB,IAAI,CAAC,MAAM,CAAG,AAAgB,SAAhB,IAAI,CAAC,MAAM,CAAc,SAAW,MACpD,CACF,CAsBA,SAAS,EAAW,CAAO,EACzB,GAAM,CAAE,GAAA,CAAE,CAAE,KAAA,CAAI,CAAE,OAAA,CAAM,CAAE,OAAA,CAAM,CAAE,CAAG,EACrC,EAAe,kBAAkB,CAC/B,YACA,CAAC;wCACmC,EAAE,EAAG;YACjC,EAAE,EAAK;YACP,EAAE,EAAO;kDAC6B,EAAE,EAAO;;;IAGvD,CAAC,CAEL,CA+BA,SAAS,IACL,aAAa,SAAS,CAAG,KAAK,SAAS,CAAC,EAC5C,CAMA,EAAK,gBAAgB,CAAC,SAAU,AAAC,IAC/B,EAAM,cAAc,GACpB,AA1EF,SAA0B,CAAK,EAE7B,IAAM,EAAc,OAAO,WAAW,CADrB,IAAI,SAAS,EAAM,MAAM,EAE1C,CAAA,EAAY,EAAE,CAAG,EAAU,MAAM,CAAG,EACpC,GAAM,CAAE,GAAA,CAAE,CAAE,KAAA,CAAI,CAAE,OAAA,CAAM,CAAE,OAAA,CAAM,CAAE,CAAG,EAErC,GADA,QAAQ,GAAG,CAAC,EAAM,GACd,AAAS,KAAT,GAAe,AAAW,KAAX,EAAe,CAChC,EAAa,WAAW,CAAG,wCAC3B,MACF,CACA,EAAa,WAAW,CAAG,GAC3B,IAAM,EAAU,IAAI,EAAK,EAAI,EAAM,EAAQ,GAC3C,EAAU,IAAI,CAAC,GACf,EAAM,MAAM,CAAC,KAAK,GAClB,EAAW,GACX,AAoBF,SAA4B,CAAE,EAC5B,IAAM,EAAmB,SAAS,aAAa,CAC7C,CAAC,UAAU,EAAE,EAAG,kBAAkB,CAAC,EAErC,EAAiB,gBAAgB,CAAC,QAAS,KAEzC,AADoB,EAAiB,OAAO,CAAC,kBACjC,MAAM,GAClB,EAAY,EAAU,MAAM,CAAC,AAAC,GAAS,EAAK,EAAE,GAAK,GACnD,GACF,EACF,EA9BqB,GACnB,AA+BF,SAAkC,CAAE,EAClC,IAAM,EAAmB,SAAS,aAAa,CAC7C,CAAC,UAAU,EAAE,EAAG,kBAAkB,CAAC,EAErC,EAAiB,gBAAgB,CAAC,QAAS,KACzC,EAAiB,WAAW,CAC1B,AAAiC,SAAjC,EAAiB,WAAW,CAAc,SAAW,OACvD,EAAY,EAAU,GAAG,CAAC,AAAC,IACrB,EAAK,EAAE,GAAK,GACd,EAAK,YAAY,GAEZ,IAET,GACF,EACF,EA9C2B,GACzB,GACF,EAwDmB,EACnB,GAEA,EAAoB,gBAAgB,CAAC,QAAS,KAC1C,EAAK,KAAK,GACV,EAAY,EAAE,CACd,EAAe,SAAS,CAAG,GAX3B,aAAa,SAAS,CAAG,KAAK,SAAS,CAAC,EAAE,CAa9C,GAeA,AAbA,WACI,IAAM,EAAY,aAAa,SAAS,CACxC,GAAI,EAEA,IAAK,IAAI,KADT,EAAY,KAAK,KAAK,CAAC,aAAa,SAAS,EAEzC,EAAW,GAGd,GACD,CAAA,aAAa,SAAS,CAAG,KAAK,SAAS,CAAC,EAAE,CAAA,CAElD","sources":["<anon>","src/script.js"],"sourcesContent":["// nodes\nconst form = document.body.querySelector(\".entry-field\");\nconst booksContainer = document.body.querySelector(\".library__items\");\nconst deleteLibraryButton = document.body.querySelector(\".button--delete\");\nconst errorMessage = document.body.querySelector(\".error-message\");\nlet myLibrary = [];\nfunction Book(id, name, author, status) {\n    this.id = id;\n    this.name = name;\n    this.author = author;\n    this.status = status;\n    this.toggleStatus = function() {\n        this.status = this.status === \"read\" ? \"unread\" : \"read\";\n    };\n}\nfunction addBookToLibrary(event) {\n    const formData = new FormData(event.target);\n    const newBookData = Object.fromEntries(formData);\n    newBookData.id = myLibrary.length + 1;\n    const { id, name, author, status } = newBookData;\n    console.log(name, author);\n    if (name === \"\" || author === \"\") {\n        errorMessage.textContent = \"Error: fill in all fields of the form\";\n        return;\n    }\n    errorMessage.textContent = \"\";\n    const newBook = new Book(id, name, author, status);\n    myLibrary.push(newBook);\n    event.target.reset();\n    renderBook(newBook);\n    addDeleteBookEvent(id);\n    addToggleStatusBookEvent(id);\n    updateLocalStorage();\n}\nfunction renderBook(newBook) {\n    const { id, name, author, status } = newBook;\n    booksContainer.insertAdjacentHTML(\"beforeend\", `\r\n      <tr class=\"library__item\" data-id=${id}>\r\n        <td>${name}</td>\r\n        <td>${author}</td>\r\n        <td><button class=\"button button--status\">${status}</button></td>\r\n        <td><button class=\"button button--remove\">delete</button></td>\r\n      </tr>\r\n    `);\n}\nfunction addDeleteBookEvent(id) {\n    const removeCurrentBtn = document.querySelector(`[data-id='${id}'] .button--remove`);\n    removeCurrentBtn.addEventListener(\"click\", ()=>{\n        const currentBook = removeCurrentBtn.closest(\".library__item\");\n        currentBook.remove();\n        myLibrary = myLibrary.filter((item)=>item.id !== id);\n        updateLocalStorage();\n    });\n}\nfunction addToggleStatusBookEvent(id) {\n    const statusCurrentBtn = document.querySelector(`[data-id='${id}'] .button--status`);\n    statusCurrentBtn.addEventListener(\"click\", ()=>{\n        statusCurrentBtn.textContent = statusCurrentBtn.textContent === \"read\" ? \"unread\" : \"read\";\n        myLibrary = myLibrary.map((item)=>{\n            if (item.id === id) item.toggleStatus();\n            return item;\n        });\n        updateLocalStorage();\n    });\n}\nfunction updateLocalStorage() {\n    localStorage.myLibrary = JSON.stringify(myLibrary);\n}\nfunction deleteLocalStorage() {\n    localStorage.myLibrary = JSON.stringify([]);\n}\nform.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    addBookToLibrary(event);\n});\ndeleteLibraryButton.addEventListener(\"click\", ()=>{\n    form.reset();\n    myLibrary = [];\n    booksContainer.innerHTML = \"\";\n    deleteLocalStorage();\n});\nfunction initApp() {\n    const localData = localStorage.myLibrary;\n    if (localData) {\n        myLibrary = JSON.parse(localStorage.myLibrary);\n        for (let item of myLibrary)renderBook(item);\n    }\n    if (!localData) localStorage.myLibrary = JSON.stringify([]);\n}\ninitApp();\n\n//# sourceMappingURL=index.405f06d5.js.map\n","// nodes\r\nconst form = document.body.querySelector(\".entry-field\");\r\nconst booksContainer = document.body.querySelector(\".library__items\");\r\nconst deleteLibraryButton = document.body.querySelector(\".button--delete\");\r\nconst errorMessage = document.body.querySelector(\".error-message\");\r\n\r\nlet myLibrary = [];\r\n\r\nfunction Book(id, name, author, status) {\r\n  this.id = id;\r\n  this.name = name;\r\n  this.author = author;\r\n  this.status = status;\r\n  this.toggleStatus = function () {\r\n    this.status = this.status === \"read\" ? \"unread\" : \"read\";\r\n  };\r\n}\r\n\r\nfunction addBookToLibrary(event) {\r\n  const formData = new FormData(event.target);\r\n  const newBookData = Object.fromEntries(formData);\r\n  newBookData.id = myLibrary.length + 1;\r\n  const { id, name, author, status } = newBookData;\r\n  console.log(name, author)\r\n  if (name === '' || author === '') {\r\n    errorMessage.textContent = 'Error: fill in all fields of the form';\r\n    return;\r\n  }\r\n  errorMessage.textContent = '';\r\n  const newBook = new Book(id, name, author, status);\r\n  myLibrary.push(newBook);\r\n  event.target.reset();\r\n  renderBook(newBook);\r\n  addDeleteBookEvent(id);\r\n  addToggleStatusBookEvent(id);\r\n  updateLocalStorage();\r\n}\r\n\r\nfunction renderBook(newBook) {\r\n  const { id, name, author, status } = newBook;\r\n  booksContainer.insertAdjacentHTML(\r\n    \"beforeend\",\r\n    `\r\n      <tr class=\"library__item\" data-id=${id}>\r\n        <td>${name}</td>\r\n        <td>${author}</td>\r\n        <td><button class=\"button button--status\">${status}</button></td>\r\n        <td><button class=\"button button--remove\">delete</button></td>\r\n      </tr>\r\n    `\r\n  );\r\n}\r\n\r\nfunction addDeleteBookEvent(id) {\r\n  const removeCurrentBtn = document.querySelector(\r\n    `[data-id='${id}'] .button--remove`\r\n  );\r\n  removeCurrentBtn.addEventListener(\"click\", () => {\r\n    const currentBook = removeCurrentBtn.closest(\".library__item\");\r\n    currentBook.remove();\r\n    myLibrary = myLibrary.filter((item) => item.id !== id);\r\n    updateLocalStorage();\r\n  });\r\n}\r\n\r\nfunction addToggleStatusBookEvent(id) {\r\n  const statusCurrentBtn = document.querySelector(\r\n    `[data-id='${id}'] .button--status`\r\n  );\r\n  statusCurrentBtn.addEventListener(\"click\", () => {\r\n    statusCurrentBtn.textContent =\r\n      statusCurrentBtn.textContent === \"read\" ? \"unread\" : \"read\";\r\n    myLibrary = myLibrary.map((item) => {\r\n      if (item.id === id) {\r\n        item.toggleStatus();\r\n      }\r\n      return item;\r\n    });\r\n    updateLocalStorage();\r\n  });\r\n}\r\n\r\nfunction updateLocalStorage() {\r\n    localStorage.myLibrary = JSON.stringify(myLibrary);\r\n}\r\n\r\nfunction deleteLocalStorage() {\r\n    localStorage.myLibrary = JSON.stringify([]);\r\n}\r\n\r\nform.addEventListener(\"submit\", (event) => {\r\n  event.preventDefault();\r\n  addBookToLibrary(event);\r\n});\r\n\r\ndeleteLibraryButton.addEventListener(\"click\", () => {\r\n    form.reset();\r\n    myLibrary = [];\r\n    booksContainer.innerHTML = \"\";\r\n    deleteLocalStorage();\r\n});\r\n\r\nfunction initApp() {\r\n    const localData = localStorage.myLibrary;\r\n    if (localData) {\r\n        myLibrary = JSON.parse(localStorage.myLibrary);\r\n        for (let item of myLibrary) {\r\n            renderBook(item);\r\n        }\r\n    }\r\n    if (!localData) {\r\n        localStorage.myLibrary = JSON.stringify([]);\r\n    }\r\n}\r\n\r\ninitApp();\r\n\r\n\r\n"],"names":["form","document","body","querySelector","booksContainer","deleteLibraryButton","errorMessage","myLibrary","Book","id","name","author","status","toggleStatus","renderBook","newBook","insertAdjacentHTML","updateLocalStorage","localStorage","JSON","stringify","addEventListener","event","preventDefault","addBookToLibrary","newBookData","Object","fromEntries","FormData","target","length","console","log","textContent","push","reset","addDeleteBookEvent","removeCurrentBtn","currentBook","closest","remove","filter","item","addToggleStatusBookEvent","statusCurrentBtn","map","innerHTML","initApp","localData","parse"],"version":3,"file":"index.405f06d5.js.map"}