{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["// nodes\nconst form = document.body.querySelector(\".entry-field\");\nconst inputList = Array.from(form.querySelectorAll(\".form-input\"));\nconst booksContainer = document.body.querySelector(\".library__items\");\nconst deleteBtn = document.body.querySelector(\".button--delete\");\nconst errorMessage = document.body.querySelector(\".error-message\");\nclass Book {\n    constructor(id, name, author, pages, status){\n        this.id = id;\n        this.name = name;\n        this.author = author;\n        this.pages = pages;\n        this.status = status;\n    }\n    getId() {\n        return this.id;\n    }\n    toggleStatus() {\n        this.status = this.status === \"read\" ? \"unread\" : \"read\";\n    }\n    render() {\n        const { id, name, author, pages, status } = this;\n        booksContainer.insertAdjacentHTML(\"beforeend\", `\r\n      <tr class=\"library__item\" data-id=${id}>\r\n        <td>${name}</td>\r\n        <td>${author}</td>\r\n        <td>${pages}</td>\r\n        <td><button class=\"button button--status\">${status}</button></td>\r\n        <td><button class=\"button button--remove\">delete</button></td>\r\n      </tr>\r\n    `);\n    }\n    addHandlers(updateStorage) {\n        const removeCurrentBtn = document.querySelector(`[data-id='${this.id}'] .button--remove`);\n        const statusCurrentBtn = document.querySelector(`[data-id='${this.id}'] .button--status`);\n        removeCurrentBtn.addEventListener(\"click\", ()=>{\n            const currentBook = removeCurrentBtn.closest(\".library__item\");\n            currentBook.remove();\n            updateStorage(\"remove\", this.id);\n        });\n        statusCurrentBtn.addEventListener(\"click\", ()=>{\n            statusCurrentBtn.textContent = statusCurrentBtn.textContent === \"read\" ? \"unread\" : \"read\";\n            updateStorage(\"toggle\", this.id);\n        });\n    }\n}\nclass Library {\n    constructor(){\n        this.storage = [];\n        this.isValid = false;\n    }\n    updateLocalStorage() {\n        localStorage.storage = JSON.stringify(this.storage);\n    }\n    deleteLocalStorage() {\n        localStorage.storage = JSON.stringify([]);\n    }\n    updateErrorMessage(message = \"\") {\n        errorMessage.textContent = message;\n    }\n    updateStorage(action, id) {\n        if (action === \"remove\") this.storage = this.storage.filter((item)=>item.id !== id);\n        if (action === \"toggle\") this.storage = this.storage.map((item)=>{\n            if (item.id === id) item.toggleStatus();\n            return item;\n        });\n        this.updateLocalStorage();\n    }\n    addBook(event) {\n        const formData = new FormData(event.target);\n        const newBookData = Object.fromEntries(formData);\n        newBookData.id = this.storage.length + 1;\n        const { id, name, author, pages, status } = newBookData;\n        this.updateErrorMessage(\"\");\n        const book = new Book(id, name, author, pages, status);\n        this.storage.push(book);\n        event.target.reset();\n        book.render();\n        book.addHandlers(this.updateStorage.bind(this));\n        this.updateLocalStorage();\n    }\n    handleFormSubmit(event) {\n        event.preventDefault();\n        this.addBook(event);\n        console.log(inputList);\n        inputList.forEach((input)=>{\n            input.classList.remove(\"valid\");\n        });\n    }\n    checkValidity(event) {\n        const formNode = event.target.form;\n        const inputNode = event.target;\n        const isValidForm = formNode.checkValidity();\n        if (inputNode.value === \"\") {\n            this.updateErrorMessage(\"\");\n            inputNode.classList.remove(\"invalid\");\n            inputNode.classList.remove(\"valid\");\n        } else if (inputNode.checkValidity()) {\n            this.updateErrorMessage(\"\");\n            inputNode.classList.remove(\"invalid\");\n            inputNode.classList.add(\"valid\");\n        } else {\n            this.updateErrorMessage(inputNode.dataset.errorMessage);\n            inputNode.classList.add(\"invalid\");\n            inputNode.classList.remove(\"valid\");\n        }\n        formNode.querySelector(\".button\").disabled = !isValidForm;\n    }\n    addHandlers() {\n        deleteBtn.addEventListener(\"click\", ()=>{\n            form.reset();\n            this.storage = [];\n            booksContainer.innerHTML = \"\";\n            this.deleteLocalStorage();\n        });\n        form.addEventListener(\"input\", (event)=>this.checkValidity(event));\n        form.addEventListener(\"submit\", (event)=>this.handleFormSubmit(event));\n    }\n    init() {\n        const localData = localStorage.storage;\n        if (localData) this.storage = JSON.parse(localData).map((item)=>{\n            const { id, name, author, pages, status } = item;\n            const book = new Book(id, name, author, pages, status);\n            book.render();\n            book.addHandlers(this.updateStorage.bind(this));\n            return book;\n        });\n        if (!localData) localStorage.storage = JSON.stringify([]);\n        this.addHandlers();\n    }\n}\nconst newLibrary = new Library();\nnewLibrary.init();\n\n//# sourceMappingURL=index.0dc2364a.js.map\n","// nodes\r\nconst form = document.body.querySelector(\".entry-field\");\r\nconst inputList = Array.from(form.querySelectorAll(\".form-input\"));\r\nconst booksContainer = document.body.querySelector(\".library__items\");\r\nconst deleteBtn = document.body.querySelector(\".button--delete\");\r\nconst errorMessage = document.body.querySelector(\".error-message\");\r\n\r\nclass Book {\r\n  constructor(id, name, author, pages, status) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.author = author;\r\n    this.pages = pages;\r\n    this.status = status;\r\n  }\r\n\r\n  getId() {\r\n    return this.id;\r\n  }\r\n\r\n  toggleStatus() {\r\n    this.status = this.status === \"read\" ? \"unread\" : \"read\";\r\n  }\r\n\r\n  render() {\r\n    const { id, name, author, pages, status } = this;\r\n    booksContainer.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      `\r\n      <tr class=\"library__item\" data-id=${id}>\r\n        <td>${name}</td>\r\n        <td>${author}</td>\r\n        <td>${pages}</td>\r\n        <td><button class=\"button button--status\">${status}</button></td>\r\n        <td><button class=\"button button--remove\">delete</button></td>\r\n      </tr>\r\n    `\r\n    );\r\n  }\r\n\r\n  addHandlers(updateStorage) {\r\n    const removeCurrentBtn = document.querySelector(\r\n      `[data-id='${this.id}'] .button--remove`\r\n    );\r\n    const statusCurrentBtn = document.querySelector(\r\n      `[data-id='${this.id}'] .button--status`\r\n    );\r\n    removeCurrentBtn.addEventListener(\"click\", () => {\r\n      const currentBook = removeCurrentBtn.closest(\".library__item\");\r\n      currentBook.remove();\r\n      updateStorage(\"remove\", this.id);\r\n    });\r\n    statusCurrentBtn.addEventListener(\"click\", () => {\r\n      statusCurrentBtn.textContent =\r\n        statusCurrentBtn.textContent === \"read\" ? \"unread\" : \"read\";\r\n      updateStorage(\"toggle\", this.id);\r\n    });\r\n  }\r\n}\r\n\r\nclass Library {\r\n  constructor() {\r\n    this.storage = [];\r\n    this.isValid = false;\r\n  }\r\n\r\n  updateLocalStorage() {\r\n    localStorage.storage = JSON.stringify(this.storage);\r\n  }\r\n\r\n  deleteLocalStorage() {\r\n    localStorage.storage = JSON.stringify([]);\r\n  }\r\n\r\n  updateErrorMessage(message = \"\") {\r\n    errorMessage.textContent = message;\r\n  }\r\n\r\n  updateStorage(action, id) {\r\n    if (action === \"remove\") {\r\n      this.storage = this.storage.filter((item) => item.id !== id);\r\n    }\r\n    if (action === \"toggle\") {\r\n      this.storage = this.storage.map((item) => {\r\n        if (item.id === id) {\r\n          item.toggleStatus();\r\n        }\r\n        return item;\r\n      });\r\n    }\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  addBook(event) {\r\n    const formData = new FormData(event.target);\r\n    const newBookData = Object.fromEntries(formData);\r\n    newBookData.id = this.storage.length + 1;\r\n    const { id, name, author, pages, status } = newBookData;\r\n    this.updateErrorMessage(\"\");\r\n    const book = new Book(id, name, author, pages, status);\r\n    this.storage.push(book);\r\n    event.target.reset();\r\n    book.render();\r\n    book.addHandlers(this.updateStorage.bind(this));\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    this.addBook(event);\r\n    console.log(inputList);\r\n    inputList.forEach((input) => {\r\n      input.classList.remove(\"valid\");\r\n    });\r\n  }\r\n\r\n  checkValidity(event) {\r\n    const formNode = event.target.form;\r\n    const inputNode = event.target;\r\n    const isValidForm = formNode.checkValidity();\r\n    if (inputNode.value === \"\") {\r\n      this.updateErrorMessage(\"\");\r\n      inputNode.classList.remove(\"invalid\");\r\n      inputNode.classList.remove(\"valid\");\r\n    } else if (inputNode.checkValidity()) {\r\n      this.updateErrorMessage(\"\");\r\n      inputNode.classList.remove(\"invalid\");\r\n      inputNode.classList.add(\"valid\");\r\n    } else {\r\n      this.updateErrorMessage(inputNode.dataset.errorMessage);\r\n      inputNode.classList.add(\"invalid\");\r\n      inputNode.classList.remove(\"valid\");\r\n    }\r\n\r\n    formNode.querySelector(\".button\").disabled = !isValidForm;\r\n  }\r\n\r\n  addHandlers() {\r\n    deleteBtn.addEventListener(\"click\", () => {\r\n      form.reset();\r\n      this.storage = [];\r\n      booksContainer.innerHTML = \"\";\r\n      this.deleteLocalStorage();\r\n    });\r\n    form.addEventListener(\"input\", (event) => this.checkValidity(event));\r\n    form.addEventListener(\"submit\", (event) => this.handleFormSubmit(event));\r\n  }\r\n\r\n  init() {\r\n    const localData = localStorage.storage;\r\n    if (localData) {\r\n      this.storage = JSON.parse(localData).map((item) => {\r\n        const { id, name, author, pages, status } = item;\r\n        const book = new Book(id, name, author, pages, status);\r\n        book.render();\r\n        book.addHandlers(this.updateStorage.bind(this));\r\n        return book;\r\n      });\r\n    }\r\n    if (!localData) {\r\n      localStorage.storage = JSON.stringify([]);\r\n    }\r\n    this.addHandlers();\r\n  }\r\n}\r\n\r\nconst newLibrary = new Library();\r\n\r\nnewLibrary.init();\r\n"],"names":["form","document","body","querySelector","inputList","Array","from","querySelectorAll","booksContainer","deleteBtn","errorMessage","Book","constructor","id","name","author","pages","status","getId","toggleStatus","render","insertAdjacentHTML","addHandlers","updateStorage","removeCurrentBtn","statusCurrentBtn","addEventListener","currentBook","closest","remove","textContent","newLibrary","storage","isValid","updateLocalStorage","localStorage","JSON","stringify","deleteLocalStorage","updateErrorMessage","message","action","filter","item","map","addBook","event","newBookData","Object","fromEntries","FormData","target","length","book","push","reset","bind","handleFormSubmit","preventDefault","console","log","forEach","input","classList","checkValidity","formNode","inputNode","isValidForm","value","add","dataset","disabled","innerHTML","init","localData","parse"],"version":3,"file":"index.0dc2364a.js.map"}