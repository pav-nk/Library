{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["// nodes\nconst form = document.body.querySelector(\".entry-field\");\nconst booksContainer = document.body.querySelector(\".library__items\");\nconst deleteBtn = document.body.querySelector(\".button--delete\");\nconst errorMessage = document.body.querySelector(\".error-message\");\nclass Book {\n    constructor(id, name, author, status){\n        this.id = id;\n        this.name = name;\n        this.author = author;\n        this.status = status;\n    }\n    getId() {\n        return this.id;\n    }\n    toggleStatus() {\n        this.status = this.status === \"read\" ? \"unread\" : \"read\";\n    }\n    render() {\n        const { id, name, author, status } = this;\n        booksContainer.insertAdjacentHTML(\"beforeend\", `\n      <tr class=\"library__item\" data-id=${id}>\n        <td>${name}</td>\n        <td>${author}</td>\n        <td><button class=\"button button--status\">${status}</button></td>\n        <td><button class=\"button button--remove\">delete</button></td>\n      </tr>\n    `);\n    }\n    addHandlers(updateStorage) {\n        const removeCurrentBtn = document.querySelector(`[data-id='${this.id}'] .button--remove`);\n        const statusCurrentBtn = document.querySelector(`[data-id='${this.id}'] .button--status`);\n        removeCurrentBtn.addEventListener(\"click\", ()=>{\n            const currentBook = removeCurrentBtn.closest(\".library__item\");\n            currentBook.remove();\n            updateStorage(\"remove\", this.id);\n        });\n        statusCurrentBtn.addEventListener(\"click\", ()=>{\n            statusCurrentBtn.textContent = statusCurrentBtn.textContent === \"read\" ? \"unread\" : \"read\";\n            updateStorage(\"toggle\", this.id);\n        });\n    }\n}\nclass Library {\n    constructor(){\n        this.storage = [];\n    }\n    updateLocalStorage() {\n        localStorage.storage = JSON.stringify(this.storage);\n    }\n    deleteLocalStorage() {\n        localStorage.storage = JSON.stringify([]);\n    }\n    updateErrorMessage(message = \"\") {\n        errorMessage.textContent = message;\n    }\n    updateStorage(action, id) {\n        if (action === \"remove\") this.storage = this.storage.filter((item)=>item.id !== id);\n        if (action === \"toggle\") this.storage = this.storage.map((item)=>{\n            if (item.id === id) item.toggleStatus();\n            return item;\n        });\n        this.updateLocalStorage();\n    }\n    addBook(event) {\n        const formData = new FormData(event.target);\n        const newBookData = Object.fromEntries(formData);\n        newBookData.id = this.storage.length + 1;\n        const { id, name, author, status } = newBookData;\n        if (name === \"\" || author === \"\") {\n            this.updateErrorMessage(\"Error: fill in all fields of the form\");\n            return;\n        }\n        this.updateErrorMessage();\n        const book = new Book(id, name, author, status);\n        this.storage.push(book);\n        event.target.reset();\n        book.render();\n        book.addHandlers(this.updateStorage.bind(this));\n        this.updateLocalStorage();\n    }\n    addHandlers() {\n        deleteBtn.addEventListener(\"click\", ()=>{\n            form.reset();\n            this.storage = [];\n            booksContainer.innerHTML = \"\";\n            this.deleteLocalStorage();\n        });\n        form.addEventListener(\"submit\", (event)=>{\n            event.preventDefault();\n            this.addBook(event);\n        });\n    }\n    init() {\n        const localData = localStorage.storage;\n        if (localData) this.storage = JSON.parse(localData).map((item)=>{\n            const { id, name, author, status } = item;\n            const book = new Book(id, name, author, status);\n            book.render();\n            book.addHandlers(this.updateStorage.bind(this));\n            return book;\n        });\n        if (!localData) localStorage.storage = JSON.stringify([]);\n        this.addHandlers();\n    }\n}\nconst newLibrary = new Library();\nnewLibrary.init();\n\n//# sourceMappingURL=index.1e166fb4.js.map\n","// nodes\nconst form = document.body.querySelector(\".entry-field\");\nconst booksContainer = document.body.querySelector(\".library__items\");\nconst deleteBtn = document.body.querySelector(\".button--delete\");\nconst errorMessage = document.body.querySelector(\".error-message\");\nclass Book {\n  constructor(id, name, author, status) {\n    this.id = id;\n    this.name = name;\n    this.author = author;\n    this.status = status;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  toggleStatus() {\n    this.status = this.status === \"read\" ? \"unread\" : \"read\";\n  }\n\n  render() {\n    const { id, name, author, status } = this;\n    booksContainer.insertAdjacentHTML(\n      \"beforeend\",\n      `\n      <tr class=\"library__item\" data-id=${id}>\n        <td>${name}</td>\n        <td>${author}</td>\n        <td><button class=\"button button--status\">${status}</button></td>\n        <td><button class=\"button button--remove\">delete</button></td>\n      </tr>\n    `\n    );\n  }\n\n  addHandlers(updateStorage) {\n    const removeCurrentBtn = document.querySelector(\n      `[data-id='${this.id}'] .button--remove`\n    );\n    const statusCurrentBtn = document.querySelector(\n      `[data-id='${this.id}'] .button--status`\n    );\n    removeCurrentBtn.addEventListener(\"click\", () => {\n      const currentBook = removeCurrentBtn.closest(\".library__item\");\n      currentBook.remove();\n      updateStorage(\"remove\", this.id);\n    });\n    statusCurrentBtn.addEventListener(\"click\", () => {\n      statusCurrentBtn.textContent =\n        statusCurrentBtn.textContent === \"read\" ? \"unread\" : \"read\";\n      updateStorage(\"toggle\", this.id);\n    });\n  }\n}\nclass Library {\n  constructor() {\n    this.storage = [];\n  }\n\n  updateLocalStorage() {\n    localStorage.storage = JSON.stringify(this.storage);\n  }\n\n  deleteLocalStorage() {\n    localStorage.storage = JSON.stringify([]);\n  }\n\n  updateErrorMessage(message = \"\") {\n    errorMessage.textContent = message;\n  }\n\n  updateStorage(action, id) {\n    if (action === \"remove\") {\n      this.storage = this.storage.filter((item) => item.id !== id);\n    }\n    if (action === \"toggle\") {\n      this.storage = this.storage.map((item) => {\n        if (item.id === id) {\n          item.toggleStatus();\n        }\n        return item;\n      });\n    }\n    this.updateLocalStorage();\n  }\n\n  addBook(event) {\n    const formData = new FormData(event.target);\n    const newBookData = Object.fromEntries(formData);\n    newBookData.id = this.storage.length + 1;\n    const { id, name, author, status } = newBookData;\n    if (name === \"\" || author === \"\") {\n      this.updateErrorMessage(\"Error: fill in all fields of the form\");\n      return;\n    }\n    this.updateErrorMessage();\n    const book = new Book(id, name, author, status);\n    this.storage.push(book);\n    event.target.reset();\n    book.render();\n    book.addHandlers(this.updateStorage.bind(this));\n    this.updateLocalStorage();\n  }\n\n  addHandlers() {\n    deleteBtn.addEventListener(\"click\", () => {\n      form.reset();\n      this.storage = [];\n      booksContainer.innerHTML = \"\";\n      this.deleteLocalStorage();\n    });\n    form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      this.addBook(event);\n    });\n  }\n\n  init() {\n    const localData = localStorage.storage;\n    if (localData) {\n      this.storage = JSON.parse(localData).map((item) => {\n        const { id, name, author, status } = item;\n        const book = new Book(id, name, author, status);\n        book.render();\n        book.addHandlers(this.updateStorage.bind(this));\n        return book;\n      });\n    }\n    if (!localData) {\n      localStorage.storage = JSON.stringify([]);\n    }\n    this.addHandlers();\n  }\n}\n\nconst newLibrary = new Library();\n\nnewLibrary.init();\n"],"names":["form","document","body","querySelector","booksContainer","deleteBtn","errorMessage","Book","constructor","id","name","author","status","getId","toggleStatus","render","insertAdjacentHTML","addHandlers","updateStorage","removeCurrentBtn","statusCurrentBtn","addEventListener","currentBook","closest","remove","textContent","newLibrary","storage","updateLocalStorage","localStorage","JSON","stringify","deleteLocalStorage","updateErrorMessage","message","action","filter","item","map","addBook","event","newBookData","Object","fromEntries","FormData","target","length","book","push","reset","bind","innerHTML","preventDefault","init","localData","parse"],"version":3,"file":"index.1e166fb4.js.map"}